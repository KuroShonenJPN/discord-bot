import json
import random
import discord
import aiohttp
from discord.ext import commands
from datetime import datetime

# === P≈òEVODN√çK ENCHANT TABLE (SGA) FONTU ===
LATIN_TO_SGA = {
    "a": "·îë",
    "b": " ñ",
    "c": "·ìµ",
    "d": "‚Ü∏",
    "e": "·í∑",
    "f": "‚éì",
    "g": "‚éî",
    "h": "·ì≠",
    "i": "‚Ñ∏",
    "j": "‚öç",
    "k": "‚çä",
    "l": "‚à∑",
    "m": "·ëë",
    "n": "‚à¥",
    "o": "·ìÆ",
    "p": "·ë≤",
    "q": "·ì∑",
    "r": "·ì∞",
    "s": "·ìπ",
    "t": "·ìª",
    "u": "·ìø",
    "v": "‚çñ",
    "w": "·í∑Ã∏",
    "x": "‚çÅ",
    "y": "‚çÇ",
    "z": "‚çÉ"
}
SGA_TO_LATIN = {v: k for k, v in LATIN_TO_SGA.items()}


# === HLAVN√ç COG S FUNKCEMI ===
class Functions(commands.Cog):

    def __init__(self, bot):
        self.bot = bot

    # === KUROBOT SKUPINA P≈ò√çKAZ≈Æ ===
    kurobot = discord.app_commands.Group(name="kurobot",
                                         description="Kurobot hlavn√≠ p≈ô√≠kazy")

    # === NAD√ÅVKA P≈ò√çKAZ ===
    @kurobot.command(
        name="nadavka",
        description="Vygeneruje n√°hodnou nad√°vku na vybran√©ho u≈æivatele")
    async def nadavka(self, interaction: discord.Interaction,
                      user: discord.Member):
        try:
            with open("words.json", "r", encoding="utf-8") as f:
                data = json.load(f)
            odborny = random.choice(data["odborne"])
            vulgar = random.choice(data["vulgarismy"])
            await interaction.response.send_message(
                f"{user.mention}, ty {odborny} {vulgar}!", ephemeral=False)
        except FileNotFoundError:
            await interaction.response.send_message("Slovn√≠k nebyl nalezen.",
                                                    ephemeral=True)
        except KeyError:
            await interaction.response.send_message(
                "Slovn√≠k m√° neplatn√Ω form√°t.", ephemeral=True)
        except Exception as e:
            await interaction.response.send_message(f"Do≈°lo k chybƒõ: {e}",
                                                    ephemeral=True)

    # === ≈†IFROV√ÅN√ç P≈ò√çKAZ ===
    @kurobot.command(
        name="encrypt",
        description="Zak√≥duje text do minecraft enchanting (SGA) fontu")
    async def encrypt(self, interaction: discord.Interaction, text: str):
        try:
            if len(text) > 1000:
                await interaction.response.send_message(
                    "Text je p≈ô√≠li≈° dlouh√Ω (max 1000 znak≈Ø)", ephemeral=True)
                return

            result = ''.join(LATIN_TO_SGA.get(c.lower(), c) for c in text)
            await interaction.response.send_message(result)
        except Exception as e:
            await interaction.response.send_message(f"Do≈°lo k chybƒõ: {e}",
                                                    ephemeral=True)

    # === DE≈†IFROV√ÅN√ç P≈ò√çKAZ ===
    @kurobot.command(
        name="decode",
        description=
        "Dek√≥duje text z minecraft enchanting (SGA) fontu do latinky")
    async def decode(self, interaction: discord.Interaction, text: str):
        try:
            result = ""
            i = 0
            while i < len(text):
                match = None
                for length in [2, 1]:
                    symbol = text[i:i + length]
                    if symbol in SGA_TO_LATIN:
                        result += SGA_TO_LATIN[symbol]
                        i += length
                        match = True
                        break
                if not match:
                    result += text[i]
                    i += 1
            await interaction.response.send_message(result)
        except Exception as e:
            await interaction.response.send_message(f"Do≈°lo k chybƒõ: {e}",
                                                    ephemeral=True)

    # === MAL STATISTIKY P≈ò√çKAZ ===
    @discord.app_commands.command(
        name="mal", description="Zobraz√≠ statistiky u≈æivatele z MyAnimeList")
    async def mal_stats(self, interaction: discord.Interaction, username: str):
        """Zobraz√≠ MAL statistiky pro dan√©ho u≈æivatele"""
        await interaction.response.defer()

        try:
            async with aiohttp.ClientSession() as session:
                # Z√≠sk√°n√≠ statistik u≈æivatele
                async with session.get(
                        f'https://api.jikan.moe/v4/users/{username}/statistics'
                ) as response:
                    if response.status == 200:
                        stats_data = await response.json()
                    else:
                        await interaction.followup.send(
                            "‚ùå U≈æivatel nebyl nalezen nebo do≈°lo k chybƒõ!")
                        return

                # Z√≠sk√°n√≠ profilov√Ωch informac√≠
                async with session.get(
                        f'https://api.jikan.moe/v4/users/{username}/full'
                ) as response:
                    if response.status == 200:
                        profile_data = await response.json()
                    else:
                        profile_data = None

            # Zpracov√°n√≠ dat
            stats = stats_data['data']['anime']

            # Vytvo≈ôen√≠ URL odkazu na MAL profil
            mal_profile_url = f"https://myanimelist.net/profile/{username}"

            # Vytvo≈ôen√≠ embedu - jm√©no je klikateln√© v popisku
            embed = discord.Embed(
                title="üìä MAL Statistiky",
                description=f"Profil: **[ {username} ]({mal_profile_url})**",
                color=0x2E51A2,  # MAL modr√° barva
                timestamp=datetime.now())

            # P≈ôid√°n√≠ pol√≠ s statistikami
            embed.add_field(name="üé¨ Celkem Anime",
                            value=f"**{stats['completed']}** dokonƒçen√Ωch\n"
                            f"**{stats['watching']}** sleduji\n"
                            f"**{stats['plan_to_watch']}** v pl√°nu\n"
                            f"**{stats['on_hold']}** pozastaveno\n"
                            f"**{stats['dropped']}** dropped",
                            inline=True)

            embed.add_field(
                name="üìà Detaily",
                value=f"**{stats['total_entries']}** polo≈æek celkem\n"
                f"**{stats['episodes_watched']}** zhl√©dnut√Ωch epizod\n"
                f"**{stats['days_watched']}** dn√≠ sledov√°n√≠\n"
                f"**{stats['mean_score']}** pr≈Ømƒõrn√© hodnocen√≠",
                inline=True)

            # P≈ôid√°n√≠ obr√°zku profilu pokud existuje
            if profile_data and 'images' in profile_data['data']:
                profile_url = profile_data['data']['images']['jpg'][
                    'image_url']
                embed.set_thumbnail(url=profile_url)

            embed.set_footer(text="Data z MyAnimeList via Jikan API")

            await interaction.followup.send(embed=embed)

        except aiohttp.ClientError:
            await interaction.followup.send(
                "‚ùå Chyba p≈ôi p≈ôipojov√°n√≠ k MAL API!")
        except KeyError:
            await interaction.followup.send("‚ùå Neplatn√° data z API!")
        except Exception as e:
            await interaction.followup.send(f"‚ùå Do≈°lo k neoƒçek√°van√© chybƒõ: {e}"
                                            )


# === NASTAVEN√ç COG ===
async def setup(bot):
    await bot.add_cog(Functions(bot))
